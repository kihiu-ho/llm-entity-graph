import type { NvlState } from '../modules/state/types';
import type { Node, Relationship } from '../types/graph-element';
import type { Point } from './geometry';
/**
 * A node that has been hit by a pointer event
 */
export interface HitTargetNode {
    /** The node that was hit */
    data: Node;
    /** The coordinates of the node that was hit */
    targetCoordinates: Point;
    /** The coordinates of the pointer event */
    pointerCoordinates: Point;
    /** The distance vector between the node and the pointer event */
    distanceVector: Point;
    /** The distance between the node and the pointer event */
    distance: number;
    /** Whether the pointer event is inside the node */
    insideNode: boolean;
}
/**
 * A relationship that has been hit by a pointer event
 */
export interface HitTargetRelationship {
    /** The relationship that was hit */
    data: Relationship;
    /** The coordinates of the source node of the relationship that was hit */
    fromTargetCoordinates: Point;
    /** The coordinates of the target node of the relationship that was hit */
    toTargetCoordinates: Point;
    /** The coordinates of the pointer event */
    pointerCoordinates: Point;
    /** The distance between the relationship and the pointer event */
    distance: number;
}
/**
 * A collection of nodes and relationships that have been hit by a pointer event
 * Part of the result of a {@link NVL}.{@link NVL.getHits} call
 */
export type HitTargets = {
    nodes: HitTargetNode[];
    relationships: HitTargetRelationship[];
};
export declare const hitTest: (x: number, y: number, state: NvlState, targets?: string[], options?: {
    hitNodeMarginWidth?: number;
}) => HitTargets;
export declare const hitTestCanvas: (x: number, y: number, parentHandler: {
    getCanvasNodesAt: (c: Point, m: number) => HitTargetNode[];
    getCanvasRelsAt: (c: Point) => HitTargetRelationship[];
}, targets?: string[], options?: {
    hitNodeMarginWidth?: number;
}) => HitTargets;
export declare const hitTestBox: (x1: number, y1: number, x2: number, y2: number, state: NvlState, targets?: string[]) => {
    nodes: Node[];
    rels: Relationship[];
};
