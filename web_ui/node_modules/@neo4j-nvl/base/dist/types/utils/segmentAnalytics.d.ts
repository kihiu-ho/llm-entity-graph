import * as SegmentJS from '@segment/analytics-next';
type AnalyticsTrackPayload = {
    eventPrefix: string;
    event: string;
    properties?: Record<string, unknown>;
};
export declare abstract class AnalyticsFunction {
    /**
     * Perform asynchronous bootstrapping
     */
    abstract init(apiKey: string): void;
    /**
     * Associate session with known user identifier
     */
    abstract identify(): void;
    /**
     * Load unique segment Id in the localstorage
     */
    abstract loadSavedSegmentId(): string;
    /**
     * save unique segment Id in the localstorage
     */
    abstract saveTrackingId(segmentId: string): void;
    /**
     * get/fetch unique segment Id from the localstorage
     */
    abstract getSegmentTrackingId(): Record<string, unknown>;
    /**
     * Track arbitrary event
     */
    abstract trackEvent(payload: AnalyticsTrackPayload): void;
}
/**
 * Analytics adapter for Segment Analytics.js
 */
export declare class SegmentAnalytics implements AnalyticsFunction {
    private analytics;
    constructor();
    init(apiKey: string): void;
    trackEvent(payload: {
        eventPrefix: string;
        event: string;
        properties: SegmentJS.EventProperties;
    }): Promise<void>;
    identify(): void;
    loadSavedSegmentId(): string;
    getSegmentTrackingId(): any;
    saveTrackingId(segmentId: string): void;
    private ready;
}
export {};
