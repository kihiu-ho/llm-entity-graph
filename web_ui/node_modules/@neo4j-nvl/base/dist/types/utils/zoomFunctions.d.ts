import type { Node } from '../index';
import type { Point } from './geometry';
declare const getExtremeLimits: (nodePositions: Point[]) => Point[];
declare const getMaxDistance: (extremeLimits?: Point[]) => number;
/**
 * Gets the center choordinates and the width and height for the given node positions
 * @param {Point[] | Node[]} nodePositions - The node positions
 * @param {number} maxNodeRadius - The maximum node radius
 * @returns An object with the center x and y coordinates and the width and height
 */
declare const getPositionBoundaries: (nodePositions?: Point[] | Node[], maxNodeRadius?: number) => {
    centerX: number;
    centerY: number;
    nodesWidth: number;
    nodesHeight: number;
};
/**
 * Gets the required zoom level for the given view and scene dimensions to fit the scene into the view
 * @param {number} viewWidth - The width of the required view
 * @param {number} viewHeight - The height of the required view
 * @param {number} sceneWidth - The width of the canvas scene
 * @param {number} sceneHeight - The height of the canvas scene
 * @returns An object with the zoom level for the x and y axis
 */
declare const getZoomLevel: (viewWidth: number, viewHeight: number, sceneWidth: number, sceneHeight: number) => {
    zoomX: number;
    zoomY: number;
};
/**
 * Creates a zoom target based on the given zoom levels and the min and max zoom level
 * @param {number} zoomX - The zoom level for the x axis
 * @param {number} zoomY - The zoom level for the y axis
 * @param {number} minZoom - The minimum zoom level
 * @param {number} maxZoom - The maximum zoom level
 * @returns The zoom target
 */
declare const createZoomTarget: (zoomX: number, zoomY: number, minZoom?: number, maxZoom?: number) => number;
/**
 * Gets the zoom target to fit the given node positions into the scene
 * @param {Point[]} nodePositions - The node positions
 * @param {number} containerWidth - The width of the container NVL is displayed in
 * @param {number} containerHeight - The height of the container NVL is displayed in
 * @param {number} maxNodeRadius - The maximum node radius, which is added as margin to the scene (defaults to `50`)
 * @returns
 */
declare const getZoomTargetForNodePositions: (nodePositions: Point[], containerWidth: number, containerHeight: number, maxNodeRadius?: number) => number;
declare const getFlexibleZoomLimit: (nodePositions: Point[], rect: HTMLCanvasElement, maxNodeRadius: number) => number;
declare const getNewZoomWithinLimits: (newZoom: number, oldZoom: number, minZoom: number, maxZoom: number) => number;
declare const isZoomOutAtLimit: (newZoom: number, oldZoom: number, zoomOutLimit: number) => boolean;
declare const getDynamicZoom: (nodePositions: Point[] & Node[], minZoom: number, maxZoom: number, rect: HTMLCanvasElement, newZoom: number, currentZoom: number) => number;
export { getFlexibleZoomLimit, getZoomTargetForNodePositions, isZoomOutAtLimit, getNewZoomWithinLimits, getExtremeLimits, getMaxDistance, getPositionBoundaries, getZoomLevel, createZoomTarget, getDynamicZoom };
