import type { DataSet } from '../modules/dataset';
import type { Node, Relationship } from '../types/graph-element';
export type FlatRel = Omit<Relationship & {
    bundledRels: Omit<Relationship, 'from' | 'to'>[];
    key: string;
}, 'id'>;
/**
 * Flattens a list of relationships so only one relationship remains between two nodes.
 * Falls back to default rel color when relationships between two nodes have varying colors.
 * Sums widths of relationships when more than one relationship exists between two nodes.
 * @param {Relationship[]} relItems List of all relationships and their connected ids.
 * @param {string} [disabledItemColor] The color to use for the disabled relationships
 * @return {FlatRel[]} A flattened list of relationships.
 */
export declare const relItemsToFlatList: (relItems: Relationship[], disabledItemColor?: string) => FlatRel[];
export declare const getAdjNodesMapAndRelMap: (rels: Relationship[]) => {
    adjNodesMap: Record<string, Set<string>>;
    relMap: Record<string, Relationship[]>;
};
export declare const getConnectedNodesAndRels: (addedNodes: Set<Node['id']>, addedRels: Set<Relationship['id']>, nodes: DataSet<Node>, rels: DataSet<Relationship>) => {
    connectedNodes: Record<string, Node>;
    connectedRels: Record<string, Relationship>;
};
export declare const hasSizeChanged: (graphObjectUpdates?: Node[]) => boolean;
