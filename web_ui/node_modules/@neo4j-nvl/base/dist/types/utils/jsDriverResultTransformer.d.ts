import type { Node as DriverNode, Relationship as DriverRelationship, Path, Record } from 'neo4j-driver';
export declare const recordMapper: (record: Record) => any[];
type GraphElement = DriverNode | DriverRelationship | Path;
type NestedGraphElements = GraphElement | NestedGraphElements[];
export declare const recordCollector: (graphElements: NestedGraphElements[]) => {
    recordObjectMap: Map<any, any>;
    nodes: any[];
    relationships: any[];
};
/**
 * Result transformer for the Neo4j JavaScript driver results to NVL graph elements.
 * @example
 *
 * ```ts
 * import neo4j from "neo4j-driver";
 * import { nvlResultTransformer, NVL } from "@neo4j-nvl/base";
 *
 * const driver = neo4j.driver("{uri}", neo4j.auth.basic("{user}", "{password}"));
 * const nvlGraph = await driver.executeQuery(
 *   "MATCH (a)-[r]-(b) RETURN a,r,b LIMIT 25",
 *   {},
 *   { resultTransformer: nvlResultTransformer }
 * );
 *
 * const nvl = new NVL(document.getElementById('viz'), nvlGraph.nodes, nvlGraph.relationships);
 * ```
 *
 * @see {@link https://neo4j.com/docs/api/javascript-driver/current/class/lib6/result-transformers.js~ResultTransformers.html|ResultTransformers on Neo4j JS Driver API Docs}
 */
export declare const nvlResultTransformer: import("neo4j-driver-core/types/result-transformers").ResultTransformer<{
    recordObjectMap: Map<any, any>;
    nodes: any[];
    relationships: any[];
}>;
export {};
