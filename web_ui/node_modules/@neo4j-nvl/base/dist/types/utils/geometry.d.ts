import type { Node } from '../types/graph-element';
/**
 * An object representing a point in 2D space.
 */
export interface Point {
    /** The x coordinate of the point. */
    x: number;
    /** The y coordinate of the point. */
    y: number;
}
/**
 * This function checks if the coordinates are defined.
 * @param {Point | Node} from - The node the edge starts from.
 * @param {Point | Node} to - The node the edge ends at.
 * @returns {boolean} True if the coordinates are defined.
 */
export declare const areCoordinateDefined: (from: Point | Node, to: Point | Node) => boolean;
/**
 * Returns true if the two points are within PointDelta pixels of each other
 * This function is used to determine if a new point is close enough to an
 * existing point to be considered the same point
 * @param {Node} p1 - The first point.
 * @param {Node} p2 - The second point.
 * @returns {boolean} True if the two points are within PointDelta pixels of each other.
 */
export declare const pointEqual: (p1: Node | Point, p2: Node | Point) => boolean;
/**
 * A class representing a line segment between two points in 2D space.
 * @param {Point} p1 - The first point of the segment.
 * @param {Point} p2 - The second point of the segment.
 */
export declare class Segment {
    /** The first point of the segment. */
    readonly p1: Point;
    /** The second point of the segment. */
    readonly p2: Point;
    /** The unit vector of the segment. */
    readonly unit: Point;
    /** The unit normal vector of the segment. */
    readonly norm: Point;
    /** The length of the segment. */
    readonly length: number;
    /** The vector between the two points of the segment. */
    readonly vector: Point;
    constructor(p1: Point, p2: Point);
    /**
     * Get the vector between the two points of the segment.
     * @returns {Point} The vector between the two points of the segment.
     * @private
     * @see {@link https://en.wikipedia.org/wiki/Vector_(spatial)}
     */
    private getVector;
    /**
     * Get the length of the vector between the two points of the segment.
     * @returns {number} The length of the segment.
     * @private
     * @see {@link https://en.wikipedia.org/wiki/Vector_(spatial)#Length}
     */
    private getLength;
    /**
     * Get the unit vector of the two points of the segment.
     * @returns {Point} The unit vector of the segment.
     * @private
     * @see {@link https://en.wikipedia.org/wiki/Euclidean_vector#Unit_vector}
     * @see {@link https://en.wikipedia.org/wiki/Unit_vector}
     */
    private getUnitVector;
    /**
     * Get the unit normal vector of the two points of the segment.
     * @returns {Point} The unit normal vector of the segment.
     * @private
     * @see {@link https://en.wikipedia.org/wiki/Normal_(geometry)}
     */
    private getUnitNormalVector;
}
/**
 * Calculates the projection ratio between two vectors.
 * @param {Point} lineStartToPointVector - The vector from the start of the line to the point.
 * @param {Point} lineVector - The vector of the line.
 * @returns {number} The projection of the point onto the line.
 * The projection ratio is a value between 0 and 1.
 * The projection ratio is 0 if the point is closest to the start of the line.
 * The projection ratio is 1 if the point is closest to the end of the line.
 * @see {@link https://en.wikipedia.org/wiki/Vector_projection}
 */
export declare const getProjectionRatio: (lineStartToPointVector: Point, lineVector: Point) => number;
/**
 * Calculates the shortest distance between a point and a line.
 * @param {Point} lineStart - The first point of the line.
 * @param {Point} lineEnd - The second point of the line.
 * @param {Point} point - The point to calculate the distance to.
 * @returns {number} The distance between the point and the line.
 * If the actual distance does not matter,
 * if you only want to compare what this function
 * returns to other results of this function, you
 * can just return the squared distance instead
 * (i.e. remove the sqrt) to gain a little performance.
 */
export declare const getDistanceToLine: (lineStart: Point, lineEnd: Point, point: Point) => number;
/**
 * Get the intersection point of two lines
 * @param {Point} p0 - First point of first line
 * @param {Point} p1 - Second point of first line
 * @param {Point} p2 - First point of second line
 * @param {Point} p3 - Second point of second line
 * @returns {Point | null} Intersection point
 * @see https://github.com/bit101/CodingMath/blob/master/episode33/parallel.js
 * Returns null if lines are parallel
 */
export declare const getIntersection: (p0: Point, p1: Point, p2: Point, p3: Point) => Point | null;
/**
 * This is a function to calculate the distance between a point and a quadratic curve.
 * The curve is defined by three points (from, to, control).
 * The point is defined by an object with x and y properties (point).
 * The function returns the distance between the point and the curve.
 * @param {Point} fromCoordinates - The first point of the curve.
 * @param {Point} toCoordinates - The second point of the curve.
 * @param {Point} control - The control point of the curve.
 * @param {Point} point - The point to calculate the distance to.
 * @returns {number} The distance between the point and the curve.
 */
export declare const getDistanceToQuadratic: (fromCoordinates: Point, toCoordinates: Point, control: Point, point: Point) => number;
