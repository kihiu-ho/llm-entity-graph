import type { Node, Relationship } from '../types/graph-element';
import type { Point } from '../utils/geometry';
/** A graph stored with mobx. */
export interface DataSet<T> {
    items: T[];
    idToItem: Record<string, T>;
    channels: Record<string, Channel<T>>;
    idToPosition: Record<string, Node & Point>;
    idToHtmlOverlay?: Record<string, HTMLElement>;
    version: number;
    addChannel: (this: DataSet<T>, channelName: string) => void;
    removeChannel: (this: DataSet<T>, channelName: string) => void;
    clearChannel: (this: DataSet<T>, channelName: string) => void;
    add: (data: T[], result: ActionResult) => void;
    update: (data: Partial<T>[], result: ActionResult) => void;
    remove: (ids: string[], result: ActionResult) => void;
    updatePositions: (data: Node[]) => void;
    updateHtmlOverlay: (overlay: HTMLElement) => void;
}
export type NodeDataSet = DataSet<Node>;
export type RelationshipDataSet = DataSet<Relationship>;
export interface ActionResult {
    added?: boolean;
    removed?: boolean;
    updated?: boolean;
}
export interface Channel<T> {
    adds: Record<string, T>;
    updates: Record<string, T>;
    removes: Record<string, T>;
}
export declare const getHtmlProperty: (item: Partial<Node | Relationship>) => HTMLElement | undefined;
/**
 * Creates an empty dataset in which a graph be stored and updated using mobx actions.
 * @returns A new and empty {@link DataSet}
 */
export declare const createDataSet: <T extends Node | Relationship>() => DataSet<T>;
