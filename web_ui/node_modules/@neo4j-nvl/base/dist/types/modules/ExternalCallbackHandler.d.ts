import type { Node } from '../types/graph-element';
/**
 * An object specifying the required callback functions for certain actions
 */
export interface ExternalCallbacks {
    /** Triggered when a layout is done moving. */
    onLayoutDone?: () => void;
    /** Triggered on each step of a layout. */
    onLayoutStep?: (p: Node[]) => void;
    /** Triggered when NVL throws an error after initialization. */
    onError?: (error: Error) => void;
    /** Triggered when a asynchronous layout calculation starts/stops. */
    onLayoutComputing?: (isComputing: boolean) => void;
    onWebGLContextLost?: (webGLContextEvent: WebGLContextEvent) => void;
    /** Triggered when a zoom transition (e.g. {@link NVL.fit} or {@link NVL.resetZoom}) function is done. */
    onZoomTransitionDone?: () => void;
    restart?: () => void;
}
export declare const isExternalCallback: (callback: unknown) => callback is keyof ExternalCallbacks;
export default class ExternalCallbackHandler {
    callbacks: ExternalCallbacks;
    constructor(externalCallbacks?: ExternalCallbacks);
    onZoomTransitionDone(): void;
    onLayoutDone(): void;
    onLayoutStep(p: Node[]): void;
    onLayoutComputing(isComputing: boolean): void;
    onError(error: Error): void;
    onWebGLContextLost(webGLContextEvent: WebGLContextEvent): void;
    private isValidFunction;
}
