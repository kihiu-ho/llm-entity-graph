/**
 * A class capable of measuring performance.
 * Usage:
 * When you want to measure a block of code, start by calling
 * performanceTesterInstance.startTest() or
 * performanceTesterInstance.startTest('Some readable name') if you
 * want to control how it prints.
 * After the block of code ends, call performanceTesterInstance.endTest()
 */
export default class PerformanceTester {
    disabled: boolean;
    tree: PerformanceTree;
    /**
     * Starts a performance measurement. Every call to this method must be followed
     * by a call to endTest(). Tests can be nested.
     * @param  {String} measurement String identifying this measurement. Only used for printing, so
     *                       keep it human readable.
     */
    startTest(measurement: string): void;
    /**
     * Ends the last started test, giving it an end time.
     */
    endTest(): void;
    /**
     * Clears all performance measurements
     */
    reset(): void;
    /**
     * Prints all the performance measurements to console by calling
     * print() on the performance tree.
     */
    print(): void;
}
/**
 * A tree of PerformanceTreeNodes.
 * @type {PerformanceTree}
 */
declare class PerformanceTree {
    root: any;
    current: any;
    /**
     * Empties the tree.
     */
    clear(): void;
    /**
     * Adds a new node to the tree at the current open position, containing the
     * data provided. It also sets the newly added node as the currently open one.
     * @param {PerformanceData} data A PerformanceData object.
     */
    add(data: PerformanceData): void;
    /**
     * The tree always maintains a pointer to the currently open node. This
     * method closes that node, closes the data object in contains, and opens
     * the parent node.
     */
    close(): void;
    /**
     * Gets the data object of the currently open node.
     * @return {PerformanceData} The data object of the currently open node.
     */
    getCurrentData(): PerformanceData;
    /**
     * Prints this entire tree to the console.
     */
    print(): void;
}
/**
 * Performance measurement data.
 * @type {PerformanceData}
 */
declare class PerformanceData {
    /**
     * Instantiates a data measurement, giving it the start time when constructor is called.
     * Remember that you also have to call close on this object to make it valid.
     * @param  {String} name String identifying this measurement. Only used for printing, so
     *                       keep it human readable.
     * @return {PerformanceData} The data object
     */
    constructor(name: string);
    name: any;
    startTime: any;
    endTime: any;
    /**
     * Sets the endTime measurement on this data object.
     */
    close(): void;
    /**
     * Gets the time spent on this measurement
     * @return {Number} Time spent in ms
     */
    _timeSpent(): number;
}
export {};
