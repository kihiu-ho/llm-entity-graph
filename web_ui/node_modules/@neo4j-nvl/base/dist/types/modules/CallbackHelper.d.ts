import { type ExternalCallbacks } from './ExternalCallbackHandler';
type CallbackFunction = ExternalCallbacks['onError'] | ExternalCallbacks['onLayoutComputing'] | ExternalCallbacks['onLayoutDone'] | ExternalCallbacks['onLayoutStep'];
/**
 * A class for registering and calling callbacks
 * @example
 * ```
 * import { CallbackHelper } from './CallbackHelper'
 *
 * const callbackHelper = new CallbackHelper()
 * callbackHelper.register('onError', (e) => {
 *  console.error(e)
 * })
 * ```
 */
export declare class CallbackHelper {
    private readonly callbacks;
    constructor();
    /**
     * Register a callback function to be called when an event of that name happens
     * @param {string} name The name of the callback to register
     * @param {function} callback A function that will be called when an event of that name happens
     * If other callbacks are already registered for that name it is added to the list
     */
    register(name: keyof ExternalCallbacks, callback: CallbackFunction): void;
    /**
     * Check if a callback function with that name is registered already
     * @param {string} name - The name of the callbacks to check
     * @return {boolean} Whether or not a callback function with that name is registered
     */
    isCallbackRegistered(name: keyof ExternalCallbacks): boolean;
    /**
     * Call all callbacks registered for a given name
     * @param {string} name - The name of the callbacks to call
     * @param {object} data - Data to pass when calling the callbacks
     */
    callIfRegistered(): void;
}
export {};
