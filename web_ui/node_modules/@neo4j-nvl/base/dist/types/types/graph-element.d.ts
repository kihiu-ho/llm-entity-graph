import type { StyledCaption } from '../renderers/canvasrenderer/types';
/**
 * The base type for graph elements.
 * @private
 * @internal
 */
interface GraphElement {
    /**
     * The id of the current node or relationship.
     * Ids need to be unique across all nodes and relationships.
     * Ids need to be strings and cannot be empty.
     */
    readonly id: string;
    color?: string;
    /** Whether or not the current node or relationship is selected.*/
    selected?: boolean;
    /** The text to display inside on node or relationship.
     * @deprecated Use {@link captions} instead.
     */
    caption?: string;
    /** Whether or not the current node or relationship is disabled.*/
    disabled?: boolean;
    /** Whether or not the current node or relationship is hovered.*/
    hovered?: boolean;
    /** The caption text size.*/
    captionSize?: number;
    /**
     * The caption align.
     * Has no affect on self-referring relationships.
     */
    captionAlign?: 'top' | 'bottom' | 'center';
    /**
     * The caption text and font style.
     * Captions are only visible when using the 'canvas' renderer.
     */
    captions?: StyledCaption[];
    /**
     * An icon to be displayed anywhere on top of the graph element.
     * Icons are expected to be square.
     */
    overlayIcon?: {
        url: string;
        /**
         * The position of the icon relative to the node or relationship.
         * The position is a percentage of the node or relationship size.
         * `[1, 1]` is the bottom right corner of the node or relationship.
         * `[-1, -1]` is the top left corner of the node or relationship.
         * @defaultValue `[0, 0]`, the center of the node or relationship.
         */
        position?: number[];
        /**
         * The size of the icon relative to the node size or relationship caption size.
         * The size is a percentage of the node size or relationship caption size.
         * @defaultValue `1`, the same size as the node size or relationship caption size.
         */
        size?: number;
    };
}
export declare const isValidNode: (node: unknown) => node is Node;
/**
 * A node inside the graph visualization.
 */
interface Node extends GraphElement {
    /** The size of the node.*/
    size?: number;
    /** Whether or not the current node is pinned.*/
    pinned?: boolean;
    /**
     * @ignore
     * The x-coordinate for the position of the node.
     */
    x?: number;
    /**
     * @ignore
     * The y-coordinate for the position of the node.
     */
    y?: number;
    /** Whether or not the current node is activated.*/
    activated?: boolean;
    /**
     * The url to an icon to display inside the node.
     * Icons are expected to be black. If the node's background color is dark,
     * the icon will be inverted to white.
     * Icons are expected to be square.
     */
    icon?: string;
    /**
     * The DOM element to display on top of a node.
     * @experimental
     */
    html?: HTMLElement;
}
/**
 * @internal
 */
type PartialNode = Partial<Node> & {
    id: string;
};
export declare const isValidRelationship: (relationship: unknown) => relationship is Relationship;
/**
 * A relationship inside the graph visualization.
 */
interface Relationship extends GraphElement {
    /** Node id where the relationship starts from.*/
    from: string;
    /** Node id where the relationship points to.*/
    to: string;
    /** The relationship type.*/
    type?: string;
    /** The width of the relationship.*/
    width?: number;
    /**
     * The DOM element to display on top of a relationship caption.
     * @experimental
     * The {@link captionSize} and {@link captionAlign} properties
     * will affect the position and height of the html container element.
     */
    captionHtml?: HTMLElement;
}
/**
 * @internal
 */
type PartialRelationship = Partial<Relationship> & {
    id: string;
};
export type { Node, Relationship, PartialNode, PartialRelationship };
