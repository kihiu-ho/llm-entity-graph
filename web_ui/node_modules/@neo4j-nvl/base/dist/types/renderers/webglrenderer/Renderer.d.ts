import { mat4 } from 'gl-matrix';
import type { DataSet } from '../../modules/dataset';
import type { NvlState } from '../../modules/state/types';
import type { Node, Relationship } from '../../types/graph-element';
export default class Renderer {
    private readonly nodeShader;
    private readonly nodeAnimShader;
    private readonly relShader;
    private relDataBuffer;
    private readonly viewportBoxShader;
    private readonly defaultRelColor;
    private readonly defaultNodeColor;
    private readonly disableRelColor;
    private readonly disableNodeColor;
    private readonly gl;
    activeNodes: Record<string, boolean>;
    readonly canvas: HTMLCanvasElement;
    projection: mat4;
    private idToIndex;
    private posBuffer;
    private numRels;
    private numNodes;
    private nodeDataByte;
    private relIdToIndex;
    private relData;
    private viewportBoxBuffer;
    private relBuffer;
    private nodeBuffer;
    private posTexture;
    constructor(gl: WebGLRenderingContext, nodes: DataSet<Node>, rels: DataSet<Relationship>, state: NvlState);
    private setShaderUniforms;
    setData(data: {
        nodes: Node[];
        rels: Relationship[];
    }): void;
    render(positionArray: Node[], nodes: any, rels: any): void;
    renderViewbox(): void;
    updateNodes(updates: Node[]): void;
    updateRelationships(relItems: Relationship[]): void;
    private createPositionTexture;
    updateViewportBox(zoom: number, panX: number, panY: number, viewportWidth: number, viewportHeight: number): void;
    updateViewport(zoom: number, panX: number, panY: number): void;
    private setupViewportRendering;
    private setupNodeRendering;
    private setupRelationshipRendering;
    private renderAnimations;
    destroy(): void;
}
