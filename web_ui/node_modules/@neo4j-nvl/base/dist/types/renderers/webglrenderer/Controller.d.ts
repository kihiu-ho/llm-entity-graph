import type { Node, Relationship } from '../../index';
import type { DataSet } from '../../modules/dataset';
import type { NvlState } from '../../modules/state/types';
import type Renderer from './Renderer';
export interface ControllerInterface {
    mainSceneRenderer: Renderer;
    minimapRenderer: Renderer;
    needsRun: boolean;
    minimapMouseDown: boolean;
    stateDisposers: NvlState['autorun'][];
    state: NvlState;
    needsToRun: () => boolean;
    renderMainScene: (positionArray: Node[]) => void;
    renderMinimap: (positionArray: Node[]) => void;
    checkForUpdates: (nodes: DataSet<Node>, rels: DataSet<Relationship>) => void;
    onResize: () => void;
    updateMainViewport: (zoom: number, panX: number, panY: number) => void;
    updateMinimapViewport: (zoom: number, panX: number, panY: number) => void;
    handleMinimapDrag: (e: MouseEvent) => void;
    handleMinimapWheel: (evt: MouseEvent) => void;
    setupMinimapInteractions: () => void;
    destroy: () => void;
}
export default class Controller implements ControllerInterface {
    mainSceneRenderer: Renderer;
    minimapRenderer: Renderer;
    needsRun: boolean;
    minimapMouseDown: boolean;
    stateDisposers: NvlState['autorun'][];
    state: NvlState;
    constructor(options: {
        mainSceneRenderer?: Renderer;
        minimapRenderer?: Renderer;
        state?: NvlState;
    });
    needsToRun(): boolean;
    renderMainScene(positionArray: Node[]): void;
    renderMinimap(positionArray: Node[]): void;
    checkForUpdates(nodes: DataSet<Node>, rels: DataSet<Relationship>): void;
    onResize(): void;
    updateMainViewport(zoom: number, panX: number, panY: number): void;
    updateMinimapViewport(zoom: number, panX: number, panY: number): void;
    handleMinimapDrag(e: MouseEvent): void;
    handleMinimapWheel(evt: WheelEvent): void;
    setupMinimapInteractions(): void;
    destroy(): void;
}
export declare class DummyController implements ControllerInterface {
    mainSceneRenderer: Renderer;
    minimapRenderer: Renderer;
    needsRun: boolean;
    minimapMouseDown: boolean;
    stateDisposers: NvlState['autorun'][];
    state: NvlState;
    renderMainScene(positionArray: Node[]): void;
    renderMinimap(positionArray: Node[]): void;
    checkForUpdates(nodes: DataSet<Node>, rels: DataSet<Relationship>): void;
    onResize(): void;
    updateMainViewport(zoom: number, panX: number, panY: number): void;
    updateMinimapViewport(zoom: number, panX: number, panY: number): void;
    handleMinimapDrag(e: MouseEvent): void;
    handleMinimapWheel(e: MouseEvent): void;
    setupMinimapInteractions(): void;
    destroy(): void;
    needsToRun(): boolean;
}
