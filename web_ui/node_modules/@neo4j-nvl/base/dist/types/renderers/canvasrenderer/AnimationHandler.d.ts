import { Animation } from './Animation';
/**
 * A small animation running engine that lets elements do any transitions and
 * ask the rendered to redraw as long as needed.
 * The object is owned by the canvas renderer
 */
export default class AnimationHandler {
    /** A map of all animations */
    private readonly animations;
    /** A map of all durations */
    private readonly durations;
    /** The default duration */
    private readonly defaultDuration;
    /** Flag to indicate if a rerun is needed */
    private hasNextAnimation;
    /** Flag to indicate if animations should be ignored */
    private ignoreAnimationsFlag;
    constructor();
    /**
     * Main function run once per frame to advance all animations
     * @returns {boolean} true if any animation is still running
     */
    advance(): boolean;
    /**
     * Sets a flag if animations should be ignored.
     * If set to true all animations always return their end value.
     * @param {boolean} shouldIgnore
     */
    ignoreAnimations(shouldIgnore: boolean): void;
    /**
     * Sets the duration for all animations
     * @param {Object} options - An object containing animation durations for fade and size
     */
    setOptions(options: {
        fadeDuration: number;
        sizeDuration: number;
    }): void;
    /**
     * Returns whether any animation is running
     * @returns {boolean}
     */
    needsToRun(): boolean;
    /**
     * Returns the current value of an animation
     * @param {string} elementId - The id of the element the animation is running on
     * @param {string} name - The name of the animation
     * @returns {number} The current value of the animation
     */
    getValueForAnimationName(elementId: string, name: string, target: number, type?: number): number;
    private createAnimation;
    getById(id: string): Record<string, Animation> | undefined;
    /**
     * Creates a new size animation for the given element and name.
     * If an animation already exists for the given element and name, it will be returned.
     * If not, a new animation will be created.
     * @param {number} currentValue - The current value of the animation
     * @param {string} elementId - The id of the element to animate
     * @param {string} name - The name of the animation
     * @returns {Animation} The animation
     */
    private createFadeAnimation;
    /**
     * Creates a new fade animation for the given element and name.
     * If an animation already exists for the given element and name, it will be returned.
     * If not, a new animation will be created.
     * @param {number} currentValue - The current value of the animation
     * @param {string} elementId - The id of the element to animate
     * @param {string} name - The name of the animation
     * @returns {Animation} The animation
     */
    private createSizeAnimation;
}
