import type { BorderStyle, DisabledItemStyles } from '../../../modules/state/types';
import type { Node, Relationship } from '../../../types/graph-element';
import type { Point } from '../../../utils/geometry';
import type ImageCache from '../ImageCache';
import type ArrowBundle from './ArrowBundle';
/**
 * This function calculates the difference in radius between two nodes.
 * @param {number} toArrowGap - The gap between the node and the arrow on the to side.
 * @param {number} fromArrowGap - The gap between the node and the arrow on the from side.
 * @returns {number} The difference in radius between the two nodes.
 * @comment can be affected for example by the label crust and selected ring
 * as well as a gap between the node and the arrow on it's side.
 */
export declare const getRadiusDifference: (toArrowGap: number, fromArrowGap: number) => number;
/**
 * This function calculates the coordinates of the via point
 * between two nodes. The via point is used to bend the edge
 * between the two nodes.
 * @param {Node} fromNode - The node the edge starts from.
 * @param {Node} toNode - The node the edge ends at.
 * @param {number} fromArrowGap - The gap between the node and the arrow on the from side.
 * @param {number} toArrowGap - The gap between the node and the arrow on the to side.
 * @returns {Point} The coordinates of the via point.
 */
export declare const getViaCoordinates: (fromNode: Node, toNode: Node, fromArrowGap: number, toArrowGap: number, rel: Relationship, bundle: ArrowBundle) => Point;
export declare const getPointsForStraight: (rel: Relationship, bundle: ArrowBundle, fromNode: Node, toNode: Node, showLabel: boolean, curved?: boolean) => Point[];
/**
 * Draws a label for a relationship
 * @param {CanvasRenderingContext2D} ctx - the canvas context
 * @param {number} x - the x coordinate of the label
 * @param {number} y - the y coordinate of the label
 * @param {number} angle - the angle of the label
 * @param {number} maxWidth - the maximum width of the label
 * @param {Relationship} rel - the relationship
 * @param {ArrowBundle} bundle - the arrow bundle
 * @param {DisabledItemStyles} disabledItemStyles - the styles for disabled items
 * @param {string} fontColor - the color of the font
 * @param {boolean} flip - whether to flip the label
 */
export declare const drawLabel: (ctx: CanvasRenderingContext2D, point: Point, angle: number, maxWidth: number, rel: Relationship, bundle: ArrowBundle, disabledItemStyles: DisabledItemStyles, fontColor: string, flip?: boolean) => void;
export declare const renderWaypointArrow: (ctx: CanvasRenderingContext2D, rel: Relationship, from: Node, to: Node, bundle: ArrowBundle, imageCache: ImageCache, showLabel: boolean, drawCurves: boolean, selectedBorderStyle: BorderStyle, disabledItemStyles: DisabledItemStyles, defaultRelationshipColor?: string) => void;
export declare const renderSelfArrow: (ctx: CanvasRenderingContext2D, rel: Relationship, node: Node, bundle: ArrowBundle, imageCache: ImageCache, showLabel: boolean, selectedBorderStyle: BorderStyle, disabledItemStyles: DisabledItemStyles, defaultRelationshipColor?: string) => void;
export declare const renderArrow: (ctx: CanvasRenderingContext2D, rel: Relationship, fromNode: Node, toNode: Node, bundle: ArrowBundle, imageCache: ImageCache, showLabel: boolean, selectedBorderStyle: BorderStyle, disabledItemStyles: DisabledItemStyles, defaultRelationshipColor: string, drawCurves?: boolean) => void;
export declare const distanceToEdge: (pos: Point, rel: Relationship, fromNode: Node, toNode: Node, bundle: ArrowBundle, showLabel: boolean, drawCurves?: boolean) => number;
/**
 * Returns the bounding box of the arrow.
 * @param {Relationship} rel - The relationship to get the bounding box for.
 * @param {ArrowBundle} bundle - The arrow bundle the relationship is part of.
 * @param {Node} fromNode - The node the relationship is coming from.
 * @param {Node} toNode - The node the relationship is going to.
 * @param {boolean} showLabel - Whether or not a label is shown.
 * @param {boolean} drawCurves - Whether or the relationship is drawn as a curve.
 * @returns {DOMRect} The bounding box of the arrow.
 */
export declare const getBoundingBox: (rel: Relationship, bundle: ArrowBundle, fromNode: Node, toNode: Node, showLabel?: boolean, drawCurves?: boolean) => DOMRect | null;
