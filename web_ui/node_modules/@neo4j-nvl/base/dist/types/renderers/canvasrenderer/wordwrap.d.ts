import type { StyledCaption, TextSegment } from './types';
export declare const hyphenChar = "\u2010";
export declare const ellipsisChar = "\u2026";
/**
 * This is the main function that tries to fit a text on one or more lines
 *
 * @param {string} text = The full string to place
 * @param {function} measureWidth - a function that returns the width of a string as pixels on the canvas
 * @param {function} getAvailbleWidth - A function providing the pixel width for a line index
 * @param {number} numberOfLines - How many lines is availble for this placement
 * @param {boolean} allowedToGiveUp - If cannot fit on last avilble line - should we give up or place as much as we can
 *
 * @return  array of text lines
 */
export declare const tryWithNumberOfLines: (text: string, measureWidth: (text: string) => number, getAvailableWidth: (a: number, b: number) => number, numberOfLines: number, allowedToGiveUp?: boolean) => TextSegment[];
/**
 * This functions tries to fit the text in a given number of lines and only linebreak on whitespace
 *
 * @param {string} text = The full string to place
 * @param {function} measureWidth - a function that returns the width of a string as pixels on the canvas
 * @param {function} getAvailbleWidth - A function providing the pixel width for a line index
 * @param {number} numberOfLines - How many lines is availble for this placement
 *
 * @return  array of text lines
 */
export declare const tryBreakingOnSpaces: (text: string, measureWidth: (text: string) => number, getAvailableWidth: (a: number, b: number) => number, numberOfLines: number) => TextSegment[];
/**
 * @param {object} ctx = Canvas.2dContext
 * @param {object} text - The text to display
 *
 * @return  array of text lines
 */
export declare const getLines: (ctx: CanvasRenderingContext2D, text: string, fontFace: string, fontSize: string | number, maxWidth: number, hasIcon: boolean, maxNoLines: number, align: string) => TextSegment[];
/**
 * Returns the styles by char for a group of property values
 * @param {array} captions = array of captions
 * @return array of list of styles by char
 */
export declare const getStylesByChar: (captions?: StyledCaption[]) => {
    stylesPerChar: string[][];
    fullCaption: string;
};
