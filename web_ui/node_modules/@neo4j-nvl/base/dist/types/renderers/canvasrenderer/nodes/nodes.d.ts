import type { BorderStyles, DisabledItemStyles } from '../../../modules/state/types';
import type { Node } from '../../../types/graph-element';
import type AnimationHandler from '../AnimationHandler';
type RingStyle = {
    width: number;
    color: string;
};
/**
 * Returns an array of styles for the rings of a node.
 * It takes the node as an argument, and an optional array of size animations.
 * If the node is selected, it returns the selectedStyle.rings array.
 * If the node is not selected, it returns an array containing only one object with
 * a width of 0 and an empty color.
 * @param node {Node} - The node to get the ring styles for.
 * @param animationHandler {AnimationHandler} - The animation handler.
 * @param nodeBorderStyles {BorderStyles} - The node border styles.
 * @returns {{ width: number, color: string }[]} - An array of ring styles.
 */
export declare const getRingStyles: (node: Node, animationHandler: AnimationHandler, nodeBorderStyles: any) => RingStyle[];
/**
 * Returns the bounding box of a node with the given x, y, and size properties.
 * If no size is given, the default size is used.
 * @param {Node} Node - The node to get the bounding box for.
 * @returns {object} The bounding box of the node.
 */
export declare const getBoundingBox: ({ x, y, size }: Node) => DOMRect;
/**
 * Returns the caption font size that should be used
 * for the given info level and node diameter.
 * @param infoLevel {number} - The info level.
 * @param nodeRadius {number} - The radius of the node.
 * @param captionSize {number} - The size of the caption.
 * @returns {number} - The font size.
 */
export declare const infoLevelToFontSize: (infoLevel: number, nodeRadius?: number, captionSize?: number, hasIcon?: boolean) => number;
/**
 * Returns maximum length of lines
 * @param lines {array} - The lines info
 * @returns {number} - The font size.
 */
export declare const findMaxLength: (lines: any[], ctx: CanvasRenderingContext2D, pixelRatio: number) => number;
/**
 * Returns minimum length of lines
 * @param lines {array} - The lines info
 * @returns {number} - The font size.
 */
export declare const findMinLength: (lines: any[], ctx: CanvasRenderingContext2D, pixelRatio: number) => any;
/**
 * Draws a node with the given context, node, and image cache.
 * @param ctx {any} - The context to draw the node on.
 * @param node {Node} - The node to draw.
 * @param imageCache {any} - The image cache to use.
 * @param animationHandler {AnimationHandler} - The animation handler.
 * @param nodeBorderStyles {BorderStyles} - The node border styles.
 * @param disabledItemStyles {DisabledItemStyles} - The styles for the disabled items.
 * @param zoomLevel {number} - The current zoom level.
 */
export declare const drawNode: (ctx: CanvasRenderingContext2D, node: Node, imageCache: any, animationHandler: AnimationHandler, nodeBorderStyles: BorderStyles, disabledItemStyles: DisabledItemStyles, defaultNodeColor?: string, ellipsisWidth?: number, zoomLevel?: number) => void;
export {};
