import type { Node, Relationship } from '../../../types/graph-element';
import type { WaypointPath } from '../types';
import ArrowBundle from './ArrowBundle';
export default class ArrowBundler {
    bundles: Record<string, ArrowBundle>;
    nodeToBundles: Record<string, ArrowBundle[]>;
    constructor(rels: Relationship[], waypoints: Record<string, WaypointPath>);
    /**
     * Get the arrow bundle for a given relation
     * @param {Relationship} rel - The relationship
     * @returns {ArrowBundle} The arrow bundle
     */
    getBundle(rel: Relationship): ArrowBundle;
    /**
     * Update the data
     * @param {Record<string, Relationship>} addedRels - The added relations
     * @param {Record<string, Relationship>} removedRels - The removed relations
     * @param {Record<string, WaypointPath>} waypoints - The waypoints
     */
    updateData(addedRels: Record<string, Relationship>, removedRels: Record<string, Relationship>, waypoints: Record<string, WaypointPath>): void;
    /**
     * Updates the positions of the arrow bundles based on the provided `positionMap`.
     * @param positionMap A map of node IDs to positions.
     */
    updatePositions(positionMap: Record<string, Node>): void;
    /**
     * Get a unique ID for a pair of IDs
     * @param {string} id1 - The first ID
     * @param {string} id2 - The second ID
     * @returns {string} A unique ID for the pair of IDs
     */
    private generatePairId;
}
