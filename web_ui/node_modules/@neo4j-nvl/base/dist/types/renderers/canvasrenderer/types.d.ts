import type { Node, Relationship } from '../../types/graph-element';
import type { Point } from '../../utils/geometry';
export type TextSegment = {
    hasEllipsisChar?: boolean;
    hasHyphenChar?: boolean;
    text: string;
    overflowed?: boolean;
};
/**
 * The caption text and its text style.
 * @property styles - The font styles as comma separated values
 * @example 'bold,italic'
 * @property value - The text for the caption.
 * @property key - The caption identifier key.
 */
export type StyledCaption = {
    styles?: string[];
    value?: string;
    key?: string;
};
export type StyledCaptionWithChars = StyledCaption & {
    chars?: string[][];
};
export type CacheItem = {
    image?: CacheInfo;
    inverted?: CacheInfo;
};
export type CacheInfo = {
    canvas: HTMLCanvasElement;
    image: HTMLImageElement;
    drawn: boolean;
};
export type Cache = Record<string, CacheItem>;
export interface RelationshipToRender extends Relationship {
    fromNode: Node;
    toNode: Node;
    showLabel: boolean;
}
export interface WaypointPath {
    points: Point[];
    from: Point;
    to: Point;
}
export interface ArrowBundleGap {
    size: number;
    start: number;
}
