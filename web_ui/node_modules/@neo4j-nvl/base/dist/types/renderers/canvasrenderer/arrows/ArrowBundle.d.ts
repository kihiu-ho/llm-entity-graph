import type { Relationship } from '../../../types/graph-element';
import type { Point } from '../../../utils/geometry';
import type { WaypointPath } from '../types';
export interface LabelGeometry {
    position: Point;
    rotation: number;
    width: number;
    height: number;
}
/**
 * Class representing a bundle of arrows
 */
export default class ArrowBundle {
    key: string;
    rels: {
        rel: Relationship;
    }[];
    waypointPath: WaypointPath;
    readonly selfReferring: boolean;
    fromId: string;
    toId: string;
    angles: number[];
    labelInfo: Record<string, LabelGeometry>;
    /**
     * @param {string} key - The key of the arrow bundle
     * @param {string} fromId - The source node of the arrow bundle
     * @param {string} toId - The target node of the arrow bundle
     */
    constructor(key: string, fromId: string, toId: string);
    /**
     * Insert a new arrow to the bundle
     * @param {Relationship} rel - The relationship to insert
     */
    insert(rel: Relationship): void;
    setLabelInfo(relId: string, labelInfo: LabelGeometry): void;
    /**
     * Remove an arrow from the bundle
     * @param {Relationship} rel - The arrow to remove
     */
    remove({ id }: Relationship): void;
    /**
     * Get the size of the arrow bundle
     * @returns {number} The size of the arrow bundle
     */
    size(): number;
    /**
     * Get the maximum font size of the arrows in the bundle
     * @returns {number} The maximum font size of the arrows in the bundle
     */
    maxFontSize(): number;
    /**
     * Check if relationship is in opposite direction to the bundle.
     * @param {Relationship} rel - The relationship to check
     * @returns {boolean} True if the relationship is in opposite direction to the bundle
     */
    relIsOppositeDirection({ from, to }: Relationship): boolean;
    /**
     * Get the index of a given arrow in the bundle
     * @param {Relationship} rel - The arrow to look for
     * @returns {number} The index of the arrow in the bundle, or -1 if not found
     */
    indexOf({ id }: Relationship): number;
    /**
     * Get the arrow at a given index in the bundle
     * @param {number} index - The index of the arrow to get
     * @returns {Relationship | null} The arrow at the given index
     */
    getRel(index: number): Relationship | null;
    /**
     * Set the waypoints for the arrow bundle
     * @param {WaypointPath} waypoints - The waypoints for the arrow bundle
     */
    setWaypoints(waypoints: WaypointPath): void;
    /**
     * Set the angles for the arrow bundle
     * @param {number[]} angles - The angles for the arrow bundle
     */
    setAngles(angles: number[]): void;
}
