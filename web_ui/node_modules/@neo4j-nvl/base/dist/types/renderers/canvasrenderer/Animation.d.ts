/**
 * Animation class to animate a value from a start value to an end value
 */
export declare class Animation {
    /** The id of the element to animate */
    readonly elementId: string;
    /** The current value of the animation */
    currentValue: number;
    /** The start value of the animation */
    private startValue;
    /** The current time of the animation */
    private currentTime;
    /** The duration of the animation */
    private duration;
    /** The status of the animation */
    private status;
    /** The end value of the animation */
    private endValue;
    /** The start time of the animation */
    private startTime;
    /** The end time of the animation */
    private endTime;
    /** Flag to indicate if there is a next animation */
    private hasNextAnimation;
    /**
     * Constructor
     * @param {string} elementId The id of the element to animate.
     * @param {number} startValue The start value of the animation.
     */
    constructor(elementId: string, startValue: number);
    /**
     * Sets the duration of the animation
     * @param {number} duration The duration of the animation.
     * @returns {void}
     * @public
     */
    setDuration(duration: number): void;
    /**
     * Returns the status of the animation
     * @returns {number} The status of the animation.
     * @public
     */
    getStatus(): number;
    /**
     * Advances the animation to the next frame
     * @returns {boolean} True if there is a next animation, false otherwise.
     * @public
     */
    advance(): boolean;
    /**
     * Sets the end value of the animation
     * @param {number} targetValue The end value of the animation.
     * @returns {void}
     * @public
     */
    setEndValue(targetValue: number): void;
    /**
     * Sets the end time of the animation
     * @param {number} newEndTime The end time of the animation.
     * @returns {void}
     * @private
     */
    private setEndTime;
}
