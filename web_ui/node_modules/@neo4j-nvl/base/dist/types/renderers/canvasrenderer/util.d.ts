import type { Point } from '../../utils/geometry';
import type { TextSegment } from './types';
export declare const fontThresholds: [number, number][];
/**
 * This function takes color in hex format or rgb() or rgba() format and overrides the opacity. Returns rgba() string.
 * @param {string} color
 * @param {number} opacity
 * @returns {string} rgba() string with the given opacity
 */
export declare const overrideOpacity: (color: string, opacity: number) => string;
/**
 * The parameters for drawing an arrowhead.
 */
type ArrowHeadParameters = {
    headPosition: Point;
    headAngle: number;
    headHeight: number;
    headChinHeight: number;
    headWidth: number;
};
/**
 * Creates an arrowhead shape using a polygon.
 * @param {CanvasRenderingContext2D} ctx - The canvas context to draw on.
 * @param {number} headLineWidth - The width of the arrowhead's outline.
 * @param {string} color - The color of the arrowhead.
 * @param {ArrowHeadParameters} arrowHeadParameters - The parameters for the arrowhead.
 * @param {boolean} fill - Whether or not to fill the triangle.
 * @param {boolean} stroke - Whether or not to stroke the triangle.
 */
export declare const drawArrowHead: (ctx: CanvasRenderingContext2D, headLineWidth: number, color: string, arrowHeadParameters: ArrowHeadParameters, fill?: boolean, stroke?: boolean) => void;
/**
 * Draws borders around a node with a given array of border styles
 * @param {CanvasRenderingContext2D} ctx - The canvas context
 * @param {number} x - The x coordinate of the node
 * @param {number} y - The y coordinate of the node
 * @param {number} innerRadius - The inner radius of the node without any border
 * @param {Array} borderStyles - An array of border styles
 * @internal
 */
export declare const drawCircleBand: (ctx: CanvasRenderingContext2D, x: number, y: number, innerRadius: number, borderStyles: {
    width: number;
    color: string;
}[]) => void;
export declare const drawCircle: (ctx: CanvasRenderingContext2D, x: number, y: number, r: number) => void;
/**
 * Fill a circle band with a gradient from a certain color to transparent
 * @param {CanvasRenderingContext2D} ctx - The canvas context
 * @param {number} x - The x coordinate of the node
 * @param {number} y - The y coordinate of the node
 * @param {string} color - The color of the gradient
 * @param {number} radius - The inner radius of the node without any border
 * @param {number} blur - The blur radius of the gradient
 * @param {number} maxOpacity - The maximum opacity of the gradient
 */
export declare const drawGradientCircleBand: (ctx: CanvasRenderingContext2D, x: number, y: number, color: string, radius: number, blur: number, maxOpacity?: number) => void;
/**
 * Draw a circle shape with a solid color
 */
export declare const drawSolidCircle: (ctx: CanvasRenderingContext2D, x: number, y: number, color: string, size: number) => void;
export declare function getIndividualInfoLevels(r: number, zoomLevel: number): {
    nodeInfoLevel: number;
    fontInfoLevel: number;
    iconInfoLevel: number;
};
/**
 * Prints the caption for a node
 */
export declare const drawNodeCaption: (ctx: CanvasRenderingContext2D, lines: TextSegment[], stylesPerChar: string[][], initialYPos: number, fontSize: number, fontFace: string, lineDistance: number, x: number, y: number, ellipsisWidth: number) => void;
export {};
