import NVL from '@neo4j-nvl/base';
import '@testing-library/jest-dom';
import { DragNodeInteraction } from '../interaction-handlers/drag-node-interaction';
jest.mock('@neo4j-nvl/layout-workers');
describe('DragNodeInteraction', () => {
    let dragNodeInteraction;
    let myNVL;
    const dragStartCallbackMock = jest.fn();
    const dragCallbackMock = jest.fn();
    const dragEndCallbackMock = jest.fn();
    beforeEach(() => {
        myNVL = new NVL(document.createElement('div'), [
            { id: '0', x: 10, y: 10 },
            { id: '1', x: 200, y: 200 }
        ], [{ id: '10', from: '0', to: '1' }], { disableWebGL: true, initialZoom: 1, layout: 'free' });
        dragNodeInteraction = new DragNodeInteraction(myNVL);
    });
    afterEach(() => {
        dragNodeInteraction.destroy();
        myNVL.destroy();
        dragStartCallbackMock.mockReset();
        dragCallbackMock.mockReset();
        dragEndCallbackMock.mockReset();
    });
    test('performing a simple drag operation should invoke all expected callbacks', () => {
        dragNodeInteraction.updateCallback('onDragStart', dragStartCallbackMock);
        dragNodeInteraction.updateCallback('onDrag', dragCallbackMock);
        dragNodeInteraction.updateCallback('onDragEnd', dragEndCallbackMock);
        expect(myNVL.getSelectedNodes()).toHaveLength(0);
        const mouseDownEvent = new MouseEvent('mousedown', {
            clientX: 10,
            clientY: 10
        });
        const mouseMoveEvent = new MouseEvent('mousemove', {
            buttons: 1,
            clientX: 20,
            clientY: 20
        });
        const mouseUpEvent = new MouseEvent('mouseup', {
            clientX: 20,
            clientY: 20
        });
        const container = myNVL.getContainer();
        container.dispatchEvent(mouseDownEvent);
        container.dispatchEvent(mouseMoveEvent);
        container.dispatchEvent(mouseUpEvent);
        return new Promise((resolve) => {
            expect(dragStartCallbackMock).toHaveBeenCalledTimes(1);
            expect(dragStartCallbackMock).toHaveBeenCalledWith([{ id: '0', x: 10, y: 10 }], mouseMoveEvent);
            expect(dragCallbackMock).toHaveBeenCalledTimes(1);
            expect(dragCallbackMock).toHaveBeenCalledWith([{ id: '0', x: 10, y: 10 }], mouseMoveEvent);
            expect(dragEndCallbackMock).toHaveBeenCalledTimes(1);
            expect(dragEndCallbackMock).toHaveBeenCalledWith([{ id: '0', x: 10, y: 10 }], mouseUpEvent);
            resolve();
        });
    });
    test('performing dragging on selection of nodes should invoke all expected callbacks', () => {
        dragNodeInteraction.updateCallback('onDragStart', dragStartCallbackMock);
        dragNodeInteraction.updateCallback('onDrag', dragCallbackMock);
        dragNodeInteraction.updateCallback('onDragEnd', dragEndCallbackMock);
        myNVL.updateElementsInGraph([
            { id: '0', selected: true },
            { id: '1', selected: true }
        ], []);
        expect(myNVL.getSelectedNodes()).toHaveLength(2);
        const mouseDownEvent = new MouseEvent('mousedown', {
            clientX: 10,
            clientY: 10
        });
        const mouseMoveEvent = new MouseEvent('mousemove', {
            buttons: 1,
            clientX: 20,
            clientY: 20
        });
        const mouseUpEvent = new MouseEvent('mouseup', {
            clientX: 20,
            clientY: 20
        });
        const container = myNVL.getContainer();
        container.dispatchEvent(mouseDownEvent);
        container.dispatchEvent(mouseMoveEvent);
        container.dispatchEvent(mouseUpEvent);
        return new Promise((resolve) => {
            expect(dragStartCallbackMock).toHaveBeenCalledTimes(1);
            expect(dragStartCallbackMock).toHaveBeenCalledWith([
                { id: '0', selected: true, x: 10, y: 10 },
                { id: '1', selected: true, x: 200, y: 200 }
            ], mouseMoveEvent);
            expect(dragCallbackMock).toHaveBeenCalledTimes(1);
            expect(dragCallbackMock).toHaveBeenCalledWith([
                { id: '0', selected: true, x: 10, y: 10 },
                { id: '1', selected: true, x: 200, y: 200 }
            ], mouseMoveEvent);
            expect(dragEndCallbackMock).toHaveBeenCalledTimes(1);
            expect(dragEndCallbackMock).toHaveBeenCalledWith([
                { id: '0', selected: true, x: 10, y: 10 },
                { id: '1', selected: true, x: 200, y: 200 }
            ], mouseUpEvent);
            resolve();
        });
    });
    test('dragging should not be invoked when the mouse is moved less than the drag threshold', () => {
        dragNodeInteraction.updateCallback('onDragStart', dragStartCallbackMock);
        dragNodeInteraction.updateCallback('onDrag', dragCallbackMock);
        dragNodeInteraction.updateCallback('onDragEnd', dragEndCallbackMock);
        expect(myNVL.getSelectedNodes()).toHaveLength(0);
        const mouseDownEvent = new MouseEvent('mousedown', {
            clientX: 10,
            clientY: 10
        });
        const mouseMoveEvent = new MouseEvent('mousemove', {
            buttons: 1,
            clientX: 12,
            clientY: 12
        });
        const mouseUpEvent = new MouseEvent('mouseup', {
            clientX: 12,
            clientY: 12
        });
        const container = myNVL.getContainer();
        container.dispatchEvent(mouseDownEvent);
        container.dispatchEvent(mouseMoveEvent);
        container.dispatchEvent(mouseUpEvent);
        return new Promise((resolve) => {
            expect(dragStartCallbackMock).toHaveBeenCalledTimes(0);
            expect(dragCallbackMock).toHaveBeenCalledTimes(0);
            expect(dragEndCallbackMock).toHaveBeenCalledTimes(0);
            resolve();
        });
    });
});
