import NVL from '@neo4j-nvl/base';
import '@testing-library/jest-dom';
import { HoverInteraction } from '../interaction-handlers/hover-interaction';
// jest.mock('@neo4j-nvl/base')
jest.mock('@neo4j-nvl/layout-workers');
describe('HoverInteraction', () => {
    let hoverInteraction;
    let myNVL;
    const callbackMock = jest.fn();
    beforeEach(() => {
        myNVL = new NVL(document.createElement('div'), [
            { id: '0', x: 100, y: 100 },
            { id: '1', x: 200, y: 200 }
        ], [{ id: '10', from: '0', to: '1' }], { disableWebGL: true, initialZoom: 1, renderer: 'webgl' });
        hoverInteraction = new HoverInteraction(myNVL, { drawShadowOnHover: true });
        hoverInteraction.updateCallback('onHover', callbackMock);
    });
    afterEach(() => {
        hoverInteraction.destroy();
        myNVL.destroy();
        callbackMock.mockReset();
    });
    describe('handleHover', () => {
        it('should register hover event on canvas', () => {
            const mouseEvent = new MouseEvent('mousemove', {
                clientX: 10,
                clientY: 10
            });
            hoverInteraction.handleHover(mouseEvent);
            expect(callbackMock).toHaveBeenCalledWith(undefined, { nodes: [], relationships: [] }, mouseEvent);
            expect(callbackMock).toHaveBeenCalledTimes(1);
        });
        it('should register hover event for node', () => {
            const mouseEvent = new MouseEvent('mousemove', {
                clientX: 100,
                clientY: 100
            });
            hoverInteraction.handleHover(mouseEvent);
            expect(callbackMock).toHaveBeenCalledWith({ id: '0', x: 100, y: 100, hovered: true }, {
                nodes: [
                    {
                        data: { id: '0', x: 100, y: 100, hovered: true },
                        distance: 0,
                        targetCoordinates: { x: 100, y: 100 },
                        pointerCoordinates: { x: 100, y: 100 },
                        distanceVector: { x: 0, y: 0 },
                        insideNode: true
                    }
                ],
                relationships: [
                    {
                        data: { id: '10', from: '0', to: '1' },
                        distance: 0,
                        fromTargetCoordinates: { x: 100, y: 100 },
                        toTargetCoordinates: { x: 200, y: 200 },
                        pointerCoordinates: { x: 100, y: 100 }
                    }
                ]
            }, mouseEvent);
            expect(callbackMock).toHaveBeenCalledTimes(1);
        });
        it('should register hover event for relationship', () => {
            const mouseEvent = new MouseEvent('mousemove', {
                clientX: 150,
                clientY: 150
            });
            hoverInteraction.handleHover(mouseEvent);
            expect(callbackMock).toHaveBeenCalledWith({ id: '10', from: '0', to: '1', hovered: true }, {
                nodes: [],
                relationships: [
                    {
                        data: { id: '10', from: '0', to: '1', hovered: true },
                        distance: 0,
                        fromTargetCoordinates: { x: 100, y: 100 },
                        toTargetCoordinates: { x: 200, y: 200 },
                        pointerCoordinates: { x: 150, y: 150 }
                    }
                ]
            }, mouseEvent);
            expect(callbackMock).toHaveBeenCalledTimes(1);
        });
        it('should register un-hover event for node', () => {
            const mouseEvent = new MouseEvent('mousemove', {
                clientX: 100,
                clientY: 100
            });
            hoverInteraction.handleHover(mouseEvent);
            expect(callbackMock).toHaveBeenCalledWith({ id: '0', x: 100, y: 100, hovered: true }, {
                nodes: [
                    {
                        data: { id: '0', x: 100, y: 100, hovered: true },
                        distance: 0,
                        targetCoordinates: { x: 100, y: 100 },
                        pointerCoordinates: { x: 100, y: 100 },
                        distanceVector: { x: 0, y: 0 },
                        insideNode: true
                    }
                ],
                relationships: [
                    {
                        data: { id: '10', from: '0', to: '1' },
                        distance: 0,
                        fromTargetCoordinates: { x: 100, y: 100 },
                        toTargetCoordinates: { x: 200, y: 200 },
                        pointerCoordinates: { x: 100, y: 100 }
                    }
                ]
            }, mouseEvent);
            expect(callbackMock).toHaveBeenCalledTimes(1);
            const mouseEvent2 = new MouseEvent('mousemove', {
                clientX: 10,
                clientY: 10
            });
            hoverInteraction.handleHover(mouseEvent2);
            expect(callbackMock).toHaveBeenCalledWith({ id: '0', x: 100, y: 100, hovered: false }, {
                nodes: [
                    {
                        data: { id: '0', x: 100, y: 100, hovered: false },
                        distance: 0,
                        targetCoordinates: { x: 100, y: 100 },
                        pointerCoordinates: { x: 100, y: 100 },
                        distanceVector: { x: 0, y: 0 },
                        insideNode: true
                    }
                ],
                relationships: [
                    {
                        data: { id: '10', from: '0', to: '1' },
                        distance: 0,
                        fromTargetCoordinates: { x: 100, y: 100 },
                        toTargetCoordinates: { x: 200, y: 200 },
                        pointerCoordinates: { x: 100, y: 100 }
                    }
                ]
            }, mouseEvent2);
            expect(callbackMock).toHaveBeenCalledWith(undefined, { nodes: [], relationships: [] }, mouseEvent2);
            expect(callbackMock).toHaveBeenCalledTimes(2);
        });
        it('should register un-hover event for relationship', () => {
            const mouseEvent = new MouseEvent('mousemove', {
                clientX: 150,
                clientY: 150
            });
            hoverInteraction.handleHover(mouseEvent);
            expect(callbackMock).toHaveBeenCalledWith({ id: '10', from: '0', to: '1', hovered: true }, {
                nodes: [],
                relationships: [
                    {
                        data: { id: '10', from: '0', to: '1', hovered: true },
                        distance: 0,
                        fromTargetCoordinates: { x: 100, y: 100 },
                        toTargetCoordinates: { x: 200, y: 200 },
                        pointerCoordinates: { x: 150, y: 150 }
                    }
                ]
            }, mouseEvent);
            expect(callbackMock).toHaveBeenCalledTimes(1);
            const mouseEvent2 = new MouseEvent('mousemove', {
                clientX: 10,
                clientY: 10
            });
            hoverInteraction.handleHover(mouseEvent2);
            expect(callbackMock).toHaveBeenCalledWith({ id: '10', from: '0', to: '1', hovered: false }, {
                nodes: [],
                relationships: [
                    {
                        data: { id: '10', from: '0', to: '1', hovered: false },
                        distance: 0,
                        fromTargetCoordinates: { x: 100, y: 100 },
                        toTargetCoordinates: { x: 200, y: 200 },
                        pointerCoordinates: { x: 150, y: 150 }
                    }
                ]
            }, mouseEvent2);
            expect(callbackMock).toHaveBeenCalledWith(undefined, { nodes: [], relationships: [] }, mouseEvent2);
            expect(callbackMock).toHaveBeenCalledTimes(2);
        });
        it('should un-hover node and hover relationships when moving mouse from node to relationship', () => {
            const mouseEvent = new MouseEvent('mousemove', {
                clientX: 100,
                clientY: 100
            });
            hoverInteraction.handleHover(mouseEvent);
            expect(callbackMock).toHaveBeenCalledWith({ id: '0', x: 100, y: 100, hovered: true }, {
                nodes: [
                    {
                        data: { id: '0', x: 100, y: 100, hovered: true },
                        distance: 0,
                        targetCoordinates: { x: 100, y: 100 },
                        pointerCoordinates: { x: 100, y: 100 },
                        distanceVector: { x: 0, y: 0 },
                        insideNode: true
                    }
                ],
                relationships: [
                    {
                        data: { id: '10', from: '0', to: '1' },
                        distance: 0,
                        fromTargetCoordinates: { x: 100, y: 100 },
                        toTargetCoordinates: { x: 200, y: 200 },
                        pointerCoordinates: { x: 100, y: 100 }
                    }
                ]
            }, mouseEvent);
            expect(callbackMock).toHaveBeenCalledTimes(1);
            const mouseEvent2 = new MouseEvent('mousemove', {
                clientX: 150,
                clientY: 150
            });
            hoverInteraction.handleHover(mouseEvent2);
            expect(callbackMock).toHaveBeenCalledWith({ id: '0', x: 100, y: 100, hovered: false }, {
                nodes: [
                    {
                        data: { id: '0', x: 100, y: 100, hovered: false },
                        distance: 0,
                        targetCoordinates: { x: 100, y: 100 },
                        pointerCoordinates: { x: 100, y: 100 },
                        distanceVector: { x: 0, y: 0 },
                        insideNode: true
                    }
                ],
                relationships: [
                    {
                        data: { id: '10', from: '0', to: '1', hovered: true },
                        distance: 0,
                        fromTargetCoordinates: { x: 100, y: 100 },
                        toTargetCoordinates: { x: 200, y: 200 },
                        pointerCoordinates: { x: 100, y: 100 }
                    }
                ]
            }, mouseEvent2);
            expect(callbackMock).toHaveBeenCalledWith({ id: '10', from: '0', to: '1', hovered: true }, {
                nodes: [],
                relationships: [
                    {
                        data: { id: '10', from: '0', to: '1', hovered: true },
                        distance: 0,
                        fromTargetCoordinates: { x: 100, y: 100 },
                        toTargetCoordinates: { x: 200, y: 200 },
                        pointerCoordinates: { x: 150, y: 150 }
                    }
                ]
            }, mouseEvent2);
            expect(callbackMock).toHaveBeenCalledTimes(2);
        });
        it('should un-hover relationship and hover node when moving mouse from relationship to node', () => {
            const mouseEvent = new MouseEvent('mousemove', {
                clientX: 150,
                clientY: 150
            });
            hoverInteraction.handleHover(mouseEvent);
            expect(callbackMock).toHaveBeenCalledWith({ id: '10', from: '0', to: '1', hovered: true }, {
                nodes: [],
                relationships: [
                    {
                        data: { id: '10', from: '0', to: '1', hovered: true },
                        distance: 0,
                        fromTargetCoordinates: { x: 100, y: 100 },
                        toTargetCoordinates: { x: 200, y: 200 },
                        pointerCoordinates: { x: 150, y: 150 }
                    }
                ]
            }, mouseEvent);
            expect(callbackMock).toHaveBeenCalledTimes(1);
            const mouseEvent2 = new MouseEvent('mousemove', {
                clientX: 100,
                clientY: 100
            });
            hoverInteraction.handleHover(mouseEvent2);
            expect(callbackMock).toHaveBeenCalledWith({ id: '0', x: 100, y: 100, hovered: true }, {
                nodes: [
                    {
                        data: { id: '0', x: 100, y: 100, hovered: true },
                        distance: 0,
                        targetCoordinates: { x: 100, y: 100 },
                        pointerCoordinates: { x: 100, y: 100 },
                        distanceVector: { x: 0, y: 0 },
                        insideNode: true
                    }
                ],
                relationships: [
                    {
                        data: { id: '10', from: '0', to: '1', hovered: false },
                        distance: 0,
                        fromTargetCoordinates: { x: 100, y: 100 },
                        toTargetCoordinates: { x: 200, y: 200 },
                        pointerCoordinates: { x: 100, y: 100 }
                    }
                ]
            }, mouseEvent2);
            expect(callbackMock).toHaveBeenCalledWith({ id: '10', from: '0', to: '1', hovered: false }, {
                nodes: [],
                relationships: [
                    {
                        data: { id: '10', from: '0', to: '1', hovered: false },
                        distance: 0,
                        fromTargetCoordinates: { x: 100, y: 100 },
                        toTargetCoordinates: { x: 200, y: 200 },
                        pointerCoordinates: { x: 150, y: 150 }
                    }
                ]
            }, mouseEvent2);
            expect(callbackMock).toHaveBeenCalledTimes(2);
        });
    });
});
