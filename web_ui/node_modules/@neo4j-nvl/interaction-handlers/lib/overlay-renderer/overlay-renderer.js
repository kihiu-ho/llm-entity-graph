const marquee = {
    frameWidth: 3,
    frameColor: '#a9a9a9',
    color: '#e0e0e0',
    lineDash: [10, 15],
    opacity: 0.5
};
export class OverlayRenderer {
    ctx;
    canvas;
    removeResizeListener;
    constructor(canvasParent) {
        const canvas = document.createElement('canvas');
        canvas.style.position = 'absolute';
        canvas.style.top = '0';
        canvas.style.bottom = '0';
        canvas.style.left = '0';
        canvas.style.right = '0';
        // These are needed for touchpad zoom on Edge
        canvas.style.touchAction = 'none';
        canvasParent?.appendChild(canvas);
        const context = canvas.getContext('2d');
        this.ctx = context;
        this.canvas = canvas;
        const handleResize = () => {
            this.fixCanvasSize(canvas);
        };
        canvasParent?.addEventListener('resize', handleResize);
        this.removeResizeListener = () => canvasParent?.removeEventListener('resize', handleResize);
        this.fixCanvasSize(canvas);
    }
    fixCanvasSize(canvas) {
        const parent = canvas.parentElement;
        if (!parent) {
            return;
        }
        const rect = parent.getBoundingClientRect();
        const { width } = rect;
        const { height } = rect;
        const devicePixelRatio = window.devicePixelRatio || 1;
        canvas.width = width * devicePixelRatio;
        canvas.height = height * devicePixelRatio;
        canvas.style.width = `${width}px`;
        canvas.style.height = `${height}px`;
    }
    drawBox(startX, startY, endX, endY) {
        const { ctx } = this;
        if (ctx === null) {
            return;
        }
        this.clear();
        ctx.save();
        ctx.beginPath();
        ctx.rect(startX, startY, endX - startX, endY - startY);
        ctx.closePath();
        ctx.strokeStyle = marquee.frameColor;
        const devicePixelRatio = window.devicePixelRatio || 1;
        ctx.lineWidth = marquee.frameWidth * devicePixelRatio;
        ctx.fillStyle = marquee.color;
        ctx.globalAlpha = marquee.opacity;
        ctx.setLineDash(marquee.lineDash);
        ctx.stroke();
        ctx.fill();
        ctx.restore();
    }
    drawLasso(points, stroke, fill) {
        const { ctx } = this;
        if (ctx === null) {
            return;
        }
        ctx.save();
        this.clear();
        ctx.beginPath();
        let i = 0;
        for (const point of points) {
            const { x, y } = point;
            if (i === 0) {
                ctx.moveTo(x, y);
            }
            else {
                ctx.lineTo(x, y);
            }
            i += 1;
        }
        const devicePixelRatio = window.devicePixelRatio || 1;
        ctx.strokeStyle = marquee.frameColor;
        ctx.setLineDash(marquee.lineDash);
        ctx.lineWidth = marquee.frameWidth * devicePixelRatio;
        ctx.fillStyle = marquee.color;
        ctx.globalAlpha = marquee.opacity;
        if (stroke) {
            ctx.stroke();
        }
        if (fill) {
            ctx.fill();
        }
        ctx.restore();
    }
    clear() {
        const { ctx, canvas } = this;
        if (ctx === null) {
            return;
        }
        const rect = canvas.getBoundingClientRect();
        const devicePixelRatio = window.devicePixelRatio || 1;
        ctx.clearRect(0, 0, rect.width * devicePixelRatio, rect.height * devicePixelRatio);
    }
    destroy() {
        const { canvas } = this;
        this.removeResizeListener();
        canvas.remove();
    }
}
