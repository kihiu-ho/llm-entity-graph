import { throttle } from 'lodash';
import { BaseInteraction } from './base';
import { getCanvasCenterOffset } from './utils';
/**
 * Interaction handler for zooming the canvas, which is achieved by scrolling the mouse wheel on the canvas.
 *
 * For examples, head to the {@link https://neo4j.com/docs/nvl/current/interaction-handlers/#_zoominteraction Zoom Interaction documentation page}.
 */
export class ZoomInteraction extends BaseInteraction {
    /**
     * Creates a new instance of the zoom interaction handler.
     * @param nvl - The NVL instance to attach the interaction handler to
     */
    constructor(nvl, options = {}) {
        super(nvl, options);
        this.addEventListener('wheel', this.handleWheel);
    }
    /**
     * Throttled zoom function to avoid events happening too fast.
     * @param event - The original mouse wheel event
     * "Wheel" with a touchpad, the wheel is triggered event a lot,
     * especially a lot of very small values.
     * However, updating values in NVL instance takes time.
     * Sometimes it lost the track of multiple events happening too soon.
     * As a result, the zoom might lose its anchor point under touch pad.
     * Therefore, the throttle is needed to avoid events happening too fast.
     * The throttle is set to 25ms.
     */
    throttledZoom = throttle((event) => {
        const zoom = this.nvlInstance.getScale();
        const { x, y } = this.nvlInstance.getPan();
        const factor = event.deltaY / 500;
        const newZoomTarget = zoom - factor * Math.min(1, zoom);
        const offs = getCanvasCenterOffset(this.containerInstance, event);
        const newPanX = x + (offs.x / zoom - offs.x / newZoomTarget);
        const newPanY = y + (offs.y / zoom - offs.y / newZoomTarget);
        this.nvlInstance.setZoomAndPan(newZoomTarget, newPanX, newPanY);
        this.callCallbackIfRegistered('onZoom', newZoomTarget, event);
    }, 25, { leading: true });
    handleWheel = (evt) => {
        evt.preventDefault();
        this.throttledZoom(evt);
    };
    /**
     * Removes the relevant event listeners from the canvas.
     */
    destroy = () => {
        this.removeEventListener('wheel', this.handleWheel);
    };
}
