/**
 * Base class for all interactions.
 * @abstract
 * @internal
 */
class BaseInteraction {
    nvl;
    options;
    container;
    /**
     * @internal
     */
    callbackMap;
    /**
     * @internal
     */
    constructor(nvl, options) {
        this.nvl = nvl;
        this.options = options;
        this.container = this.nvl.getContainer();
        this.callbackMap = new Map();
    }
    /**
     * @internal
     */
    get nvlInstance() {
        return this.nvl;
    }
    get currentOptions() {
        return this.options;
    }
    /**
     * @internal
     */
    get containerInstance() {
        return this.container;
    }
    /**
     * @internal
     */
    addEventListener = (type, listener, options) => {
        this.container?.addEventListener(type, listener, options);
    };
    /**
     * @internal
     */
    removeEventListener = (type, listener, options) => {
        this.container?.removeEventListener(type, listener, options);
    };
    /**
     * @internal
     */
    callCallbackIfRegistered = (name, ...args) => {
        const callback = this.callbackMap.get(name);
        if (typeof callback === 'function') {
            callback(...args);
        }
    };
    /**
     * Add or update a callback for a given event of type.
     * @param name - The name of the event
     * @param callback - The callback to be called when the event is triggered
     */
    updateCallback = (name, callback) => {
        this.callbackMap.set(name, callback);
    };
    /**
     * Remove a callback for a given event of type.
     * @param name - The name of the event
     */
    removeCallback = (name) => {
        this.callbackMap.delete(name);
    };
}
export { BaseInteraction };
