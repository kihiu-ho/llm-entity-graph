import type { NVL, Node, Relationship } from '@neo4j-nvl/base';
import { BaseInteraction } from './base';
/**
 * @internal
 */
export type DrawInteractionCallbacks = {
    onHoverNodeMargin?: ((hoveredNode: Node | null, evt: MouseEvent) => void) | boolean;
    onDrawEnded?: ((newRelationshipToAdd: Relationship | null, newTargetNodeToAdd: Node | null, event: MouseEvent) => void) | boolean;
    onDrawStarted?: ((event: MouseEvent) => void) | boolean;
};
export type DrawInteractionOptions = {
    ghostGraphStyling?: {
        node?: Pick<Node, 'color' | 'size'>;
        relationship?: Pick<Relationship, 'color' | 'width'>;
    };
};
/**
 * @internal
 */
export declare class DrawInteraction extends BaseInteraction<DrawInteractionCallbacks, DrawInteractionOptions> {
    private isMoved;
    private isDrawing;
    private isDraggingNode;
    private mouseDownNode;
    private newTempTargetNode;
    private newTempRegularRelationshipToNewTempTargetNode;
    private newTempRegularRelationshipToExistingNode;
    private newTempSelfReferredRelationship;
    private newTargetNodeToAdd;
    private newRelationshipToAdd;
    private mouseOutsideOfNvlArea;
    constructor(nvl: NVL, options?: DrawInteractionOptions);
    private cancelDrawing;
    private handleMouseUpGlobal;
    private handleMouseLeaveNvl;
    private handleMouseEnterNvl;
    private handleMouseMove;
    private setNewRegularRelationship;
    private setNewRegularRelationshipToNewTempTargetNode;
    private setNewRegularRelationshipToExistingNode;
    private setNewSelfReferredRelationship;
    private handleMouseDown;
    private handleMouseUp;
    destroy: () => void;
}
