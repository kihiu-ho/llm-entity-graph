import type { NVL } from '@neo4j-nvl/base';
/**
 * Base class for all interactions.
 * @abstract
 * @internal
 */
declare abstract class BaseInteraction<T extends Record<string, ((...args: unknown[]) => void) | boolean>, P extends Record<string, unknown>> {
    private readonly nvl;
    private readonly options;
    private readonly container;
    /**
     * @internal
     */
    callbackMap: Map<keyof T, T[keyof T]>;
    /**
     * @internal
     */
    constructor(nvl: NVL, options: P);
    /**
     * @internal
     */
    get nvlInstance(): NVL;
    get currentOptions(): P;
    /**
     * @internal
     */
    get containerInstance(): HTMLElement;
    /**
     * @internal
     */
    addEventListener: (type: keyof HTMLElementEventMap, listener: (event: Event) => void, options?: boolean | AddEventListenerOptions) => void;
    /**
     * @internal
     */
    removeEventListener: (type: keyof HTMLElementEventMap, listener: (event: Event) => void, options?: boolean | EventListenerOptions) => void;
    /**
     * @internal
     */
    callCallbackIfRegistered: (name: keyof T, ...args: unknown[]) => void;
    /**
     * Add or update a callback for a given event of type.
     * @param name - The name of the event
     * @param callback - The callback to be called when the event is triggered
     */
    updateCallback: (name: keyof T | string, callback: T[keyof T]) => void;
    /**
     * Remove a callback for a given event of type.
     * @param name - The name of the event
     */
    removeCallback: (name: keyof T | string) => void;
    /**
     * @internal
     */
    abstract destroy(): void;
}
export { BaseInteraction };
