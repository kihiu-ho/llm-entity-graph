import { BaseInteraction } from './base';
import { isDraggingMovement } from './utils';
/**
 * Click interaction handler that handles click, double click and right click events on
 * nodes, relationships, and the scene.
 *
 * For examples, head to the {@link https://neo4j.com/docs/nvl/current/interaction-handlers/#_clickinteraction Click Interaction documentation page}.
 */
export class ClickInteraction extends BaseInteraction {
    moved;
    mousePosition;
    /**
     * Creates a new click interaction handler.
     * @param nvl - The NVL instance to attach the interaction handler to
     * @param options - Options for the click interaction handler
     */
    constructor(nvl, options = { selectOnClick: false }) {
        super(nvl, options);
        this.mousePosition = { x: 0, y: 0 };
        this.addEventListener('mousedown', this.handleMouseDown, true);
        this.addEventListener('click', this.handleClick, true);
        this.addEventListener('dblclick', this.handleDoubleClick, true);
        this.addEventListener('contextmenu', this.handleRightClick, true);
    }
    handleMouseDown = (event) => {
        this.mousePosition = { x: event.clientX, y: event.clientY };
    };
    handleRightClick = (event) => {
        event.preventDefault();
        const { nvlTargets } = this.nvlInstance.getHits(event);
        const { nodes = [], relationships = [] } = nvlTargets;
        if (nodes.length === 0 && relationships.length === 0) {
            this.callCallbackIfRegistered('onCanvasRightClick', event);
            return;
        }
        if (nodes.length > 0) {
            this.callCallbackIfRegistered('onNodeRightClick', nodes[0]?.data, nvlTargets, event);
        }
        else if (relationships.length > 0) {
            this.callCallbackIfRegistered('onRelationshipRightClick', relationships[0]?.data, nvlTargets, event);
        }
    };
    handleDoubleClick = (event) => {
        const { nvlTargets } = this.nvlInstance.getHits(event);
        const { nodes = [], relationships = [] } = nvlTargets;
        if (nodes.length === 0 && relationships.length === 0) {
            this.callCallbackIfRegistered('onCanvasDoubleClick', event);
            return;
        }
        if (nodes.length > 0) {
            this.callCallbackIfRegistered('onNodeDoubleClick', nodes[0]?.data, nvlTargets, event);
        }
        else if (relationships.length > 0) {
            this.callCallbackIfRegistered('onRelationshipDoubleClick', relationships[0]?.data, nvlTargets, event);
        }
    };
    handleClick = (event) => {
        if (isDraggingMovement(event, this.mousePosition) || event.button !== 0) {
            return;
        }
        const { nvlTargets } = this.nvlInstance.getHits(event);
        const { nodes = [], relationships = [] } = nvlTargets;
        if (nodes.length === 0 && relationships.length === 0) {
            if (this.currentOptions.selectOnClick === true) {
                this.nvlInstance.deselectAll();
            }
            this.callCallbackIfRegistered('onCanvasClick', event);
            return;
        }
        if (nodes.length > 0) {
            const hitNodeData = nodes.map((node) => node.data);
            if (this.currentOptions.selectOnClick === true) {
                const selectedNodes = this.nvlInstance.getSelectedNodes();
                const selectedRelationships = this.nvlInstance.getSelectedRelationships();
                const newSelectedNodes = hitNodeData[0] ? [{ id: hitNodeData[0].id, selected: true }] : [];
                const nodeUpdates = [...newSelectedNodes, ...selectedNodes.map((node) => ({ id: node.id, selected: false }))];
                const relationshipUpdates = selectedRelationships.map((relationship) => ({
                    ...relationship,
                    selected: false
                }));
                this.nvlInstance.updateElementsInGraph(nodeUpdates, relationshipUpdates);
            }
            this.callCallbackIfRegistered('onNodeClick', nodes[0]?.data, nvlTargets, event);
        }
        else if (relationships.length > 0) {
            const hitRelationshipData = relationships.map((relationship) => relationship.data);
            if (this.currentOptions.selectOnClick === true) {
                const selectedNodes = this.nvlInstance.getSelectedNodes();
                const selectedRelationships = this.nvlInstance.getSelectedRelationships();
                const nodeUpdates = selectedNodes.map((node) => ({ id: node.id, selected: false }));
                const newSelectedRelationships = hitRelationshipData[0]
                    ? [{ id: hitRelationshipData[0].id, selected: true }]
                    : [];
                const relationshipUpdates = [
                    ...newSelectedRelationships,
                    ...selectedRelationships.map((relationship) => ({
                        ...relationship,
                        selected: false
                    }))
                ];
                this.nvlInstance.updateElementsInGraph(nodeUpdates, relationshipUpdates);
            }
            this.callCallbackIfRegistered('onRelationshipClick', relationships[0]?.data, nvlTargets, event);
        }
    };
    /**
     * Removes all related event listeners from the container.
     */
    destroy = () => {
        this.removeEventListener('mousedown', this.handleMouseDown, true);
        this.removeEventListener('click', this.handleClick, true);
        this.removeEventListener('dblclick', this.handleDoubleClick, true);
        this.removeEventListener('contextmenu', this.handleRightClick, true);
    };
}
