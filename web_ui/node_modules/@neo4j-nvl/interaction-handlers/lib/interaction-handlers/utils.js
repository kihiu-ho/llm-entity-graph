import { DRAG_THRESHOLD } from '../constants';
export const generateUniqueId = (digit) => Math.floor(Math.random() * Math.pow(10, digit)).toString();
export const isDraggingMovement = (event, originalPosition) => {
    const diffX = Math.abs(event.clientX - originalPosition.x);
    const diffY = Math.abs(event.clientY - originalPosition.y);
    if (diffX > DRAG_THRESHOLD || diffY > DRAG_THRESHOLD) {
        return true;
    }
    const distanceSquared = Math.pow(diffX, 2) + Math.pow(diffY, 2);
    return distanceSquared > DRAG_THRESHOLD;
};
export const getCanvasPosition = (canvas, mouseEvent) => {
    const rect = canvas.getBoundingClientRect();
    const devicePixelRatio = window.devicePixelRatio || 1;
    return {
        x: (mouseEvent.clientX - rect.left) * devicePixelRatio,
        y: (mouseEvent.clientY - rect.top) * devicePixelRatio
    };
};
export const getCanvasCenterOffset = (canvas, mouseEvent) => {
    const rect = canvas.getBoundingClientRect();
    const devicePixelRatio = window.devicePixelRatio || 1;
    return {
        x: (mouseEvent.clientX - rect.left - rect.width * 0.5) * devicePixelRatio,
        y: (mouseEvent.clientY - rect.top - rect.height * 0.5) * devicePixelRatio
    };
};
export const getWorldPosition = (nvl, pos) => {
    const scale = nvl.getScale();
    const pan = nvl.getPan();
    const container = nvl.getContainer();
    const { width, height } = container.getBoundingClientRect();
    const devicePixelRatio = window.devicePixelRatio || 1;
    const x = pos.x - width * 0.5 * devicePixelRatio;
    const y = pos.y - height * 0.5 * devicePixelRatio;
    return {
        x: pan.x + x / scale,
        y: pan.y + y / scale
    };
};
